!function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"round",function(){return l}),r.d(t,"bootstrapify",function(){return i}),r.d(t,"add",function(){return a}),r.d(t,"h1",function(){return m}),r.d(t,"h2",function(){return b}),r.d(t,"h3",function(){return p}),r.d(t,"h4",function(){return g}),r.d(t,"h5",function(){return y}),r.d(t,"h6",function(){return w}),r.d(t,"div",function(){return h}),showdown.setFlavor("github");const o=new showdown.Converter,n=(e,t)=>{e.className+=" "+t},l=(e,t)=>{let r=10**t;return Math.round(e*r)/r},c=(e,t)=>{let r=document.getElementsByTagName(e);for(let e of r)n(e,t)},i=()=>{c("table","table table-sm"),c("dl","row"),c("dt","font-weight-bold col-sm-3 col-lg-2 text-right"),c("dd","col-sm-9 col-lg-10"),c("img","img-fluid")};let a=e=>{console.info("Adding element",e,"to root");let t=document.getElementById("root");Array.isArray(e)?e.forEach(e=>{d(t,e)}):d(t,e)};function u(e){this.msg=e,this.name="ElementException"}const d=(e,...t)=>{return 1===t.length&&Array.isArray(t[0])&&(console.log("iterable elements",t),t=t[0]),t.forEach(t=>{if(!t)throw new u(`Cannot create an HTML element from null or undefined data: ${t}`);t.nodeType||(console.warn("Appending el without nodetype: ",t),t=f(String(t))),e.appendChild(t)}),e},s=(e,t={},...r)=>{try{let o=document.createElement(e);r=r||[];for(let[e,r]of Object.entries(t))o.setAttribute(e,r);const n=e=>d(o,e);return r.forEach(n),o}catch(o){throw console.error(o),console.error("Failed to create element:",e),console.error("Attributes:",t),console.error("Children:",r),o}};let f=e=>document.createTextNode(e),h=(e,...t)=>s("div",e,...t);let m=(e,t,r=[])=>s("h1",t,e,...r),b=(e,t,r=[])=>s("h2",t,e,...r),p=(e,t,r=[])=>s("h3",t,e,...r),g=(e,t,r=[])=>s("h4",t,e,...r),y=(e,t,r=[])=>s("h5",t,e,...r),w=(e,t,r=[])=>s("h6",t,e,...r),v=(e,t={})=>{let r=s("thead"),o=j();return e=e.map(O),o=d(o,e),d(r,o)},j=(e=[],t={})=>{try{let r=s("tr");if(!(e=>"function"==typeof e[Symbol.iterator])(e))try{e=Object.values(e)}catch(t){console.error(`Error creating table row: bad cells data.\ncells must be iterable or return values from Object.values.\ncells: ${e}`)}let o=e.map(A);return d(r,o)}catch(r){throw console.error("Could not create table row."),console.log("Cells:",e),console.log("Attr:",t),r}},O=(e,t,r=[])=>s("th",t,e),A=(e,t,r=[])=>s("td",t,e);t.default={round:l,md:e=>{let t=s("span");return t.innerHTML=o.makeHtml(e),t},add:a,append:d,h1:m,h2:b,h3:p,h4:g,h5:y,h6:w,div:h,section:(e,...t)=>s("section",e,...t),header:(e,...t)=>s("header",e,...t),footer:(e,...t)=>s("footer",e,...t),main:(e,...t)=>s("main",e,...t),aside:(e,...t)=>s("aside",e,...t),p:(e,t,r=[])=>s("p",t,e,...r),caption:(e,t,r=[])=>s("caption",t,e,...r),table:(e=[],t,r={})=>{let o=s("table",r);t&&d(o,v(t));let n=e.map(j);return console.log(n),d(o,n),console.log(o),o},br:()=>s("br"),hr:()=>s("hr"),dl:(e,t)=>{try{let t=s("dl");for(let[r,o]of Object.entries(e))d(t,s("dt",{},r)),d(t,s("dd",{},o));return t}catch(t){throw console.error("Failed to create definition list <dl> from:",e),t}},img:(e,t)=>s("img",{src:e,alt:t}),grid:(e,t)=>{if(e>12||e<1)throw e;let r=h(t);n(r,"row");for(let t=1;t<=e;t++){let e=s("div",{class:`col-${t} col-sm`});r=d(r,e)}return r},addToGrid:(e,t,...r)=>{let o=e.querySelector(`.col-${t}`);return d(o,r)}}}]);